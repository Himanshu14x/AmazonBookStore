pipeline {
  agent any
  options { timestamps() }

  environment {
    MAVEN_TOOL = 'maven-3.9'   // <-- must match Manage Jenkins -> Global Tool Configuration Name
    JDK_TOOL   = 'jdk21'       // <-- change if different
    PROJECT_DIR = 'bookstore'  // <-- the subfolder that contains pom.xml
  }

  tools {
    maven "${env.MAVEN_TOOL}"
    jdk "${env.JDK_TOOL}"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Prepare') {
      steps {
        script {
          mvnHome = tool env.MAVEN_TOOL
          javaHome = tool env.JDK_TOOL
          echo "Maven home: ${mvnHome}"
          echo "Java home: ${javaHome}"
          if (isUnix()) {
            sh "${mvnHome}/bin/mvn -v"
          } else {
            bat "\"${mvnHome}\\bin\\mvn\" -v"
          }
        }
      }
    }

    stage('Build & Test') {
      steps {
        script {
          if (isUnix()) {
            dir(env.PROJECT_DIR) {
              sh "${mvnHome}/bin/mvn -B -V clean test"
            }
          } else {
            dir(env.PROJECT_DIR) {
              bat "\"${mvnHome}\\bin\\mvn\" -B -V clean test"
            }
          }
        }
      }
    }

    stage('Package') {
      steps {
        script {
          if (isUnix()) {
            dir(env.PROJECT_DIR) {
              sh "${mvnHome}/bin/mvn -B -V package"
            }
          } else {
            dir(env.PROJECT_DIR) {
              bat "\"${mvnHome}\\bin\\mvn\" -B -V package"
            }
          }
        }
      }
    }

    stage('Archive Artifact') {
      steps {
        script {
          // archive artifacts from the submodule's target dir
          def pattern = "${env.PROJECT_DIR}/target/*.war, ${env.PROJECT_DIR}/target/*.jar"
          echo "Archiving: ${pattern}"
          archiveArtifacts artifacts: pattern, allowEmptyArchive: true
        }
      }
    }
  }

  post {
    always {
      script {
        node {
          // publish JUnit results from project dir (tolerant to missing)
          junit testResults: "${env.PROJECT_DIR}/target/surefire-reports/*.xml", allowEmptyResults: true

          // optionally archive surefire reports
          if (fileExists("${env.PROJECT_DIR}/target/surefire-reports")) {
            archiveArtifacts artifacts: "${env.PROJECT_DIR}/target/surefire-reports/**", allowEmptyArchive: true
          } else {
            echo "No surefire-reports found under ${env.PROJECT_DIR}/target"
          }
        }
      }
    }
    success { echo 'Build succeeded.' }
    failure { echo 'Build failed â€” check console output.' }
  }
}
